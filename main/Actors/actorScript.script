go.property("health", 1)
go.property("attack", 1)
go.property("attack_speed", 1)
go.property("speed", 1)
go.property("alive", true)
go.property("orders", hash("patrol"))
go.property("type", hash("hero"))
go.property("charLvl", 1)
go.property("build_time", 1)
go.property("spawn_time", 0)
go.property("sprite", 1)

local STATS = require("main.Actors.actorStats")

local FADE_DELAY = 10
local FADE_TIME = 3

local idle
local exitDown = {20, 620, 20, 620, 20, 620, 20}
exitDown[0] = 620
local exitUp = {620, 20, 620, 20, 620, 20, 620}
exitUp[0] = -10
local inn = 320

local upgrades = {}
upgrades[1] = {}
upgrades[1].XP = 6.6
upgrades[1].HP = 10
upgrades[1].ATK = 3
for lvl = 2, 100 do
	upgrades[lvl] = {}
	upgrades[lvl].XP = math.ceil(upgrades[lvl - 1].XP * 1.05)
	upgrades[lvl].HP = math.ceil(upgrades[lvl - 1].HP * 1.2)
	upgrades[lvl].ATK = upgrades[lvl - 1].ATK + math.floor(lvl / 4)
end


local unhash = {}
unhash[hash("spider")] = "spider"
unhash[hash("spider_boss")] = "spider_boss"
unhash[hash("goblin")] = "goblin"
unhash[hash("goblin_boss")] = "goblin_boss"


local function walk(self, X)
	local currentX = go.get_position().x
	sprite.play_flipbook("#"..self.sprite, "walk")
	sprite.set_hflip("#"..self.sprite, X < currentX)
	go.animate(go.get_id(), "position.x", go.PLAYBACK_ONCE_FORWARD, X, go.EASING_LINEAR, math.abs(currentX - X) / self.speed, 0, idle)
	self.action = hash("walk")
end

local function spawn(self)
	msg.post("/world", "spawn", {type = self.type, pos = inn, level = self.level, guard = math.random() > 0.66})
end

local build = {}

function build.start(self)
	sprite.play_flipbook("#"..self.sprite, "build")
	self.base = factory.create("/world#spawn_base", go.get_position() + vmath.vector3(0, 0, -0.04), nil, {type = self.type}, vmath.vector3(0, 0, 0))
	go.animate(self.base, "scale", go.PLAYBACK_ONCE_FORWARD, vmath.vector3(1, 1, 1), go.EASING_OUTCUBIC, self.build_time)
	go.animate(self.base, "position.y", go.PLAYBACK_ONCE_FORWARD, go.get_position().y + 25, go.EASING_OUTCUBIC, self.build_time)
	timer.delay(self.build_time, false, build.finish)
end

function build.finish(self)
	self.orders = hash("guard")
	if self.alive then
		if self.spawn_time > 0 then
			self.spawnTimer = timer.delay(self.spawn_time, true, spawn)
		end
		idle(self)
	end
end

local function levelUp(self)
	self.charLvl = self.charLvl + 1
	self.gold = self.gold - upgrades[self.charLvl].XP
	self.maxHealth = upgrades[self.charLvl].HP
	self.attack = upgrades[self.charLvl].ATK
	particlefx.play("#levelUp")
	if self.charLvl < 11 then
		msg.post("#"..self.sprite, "disable")
		self.sprite = self.sprite + 1
		msg.post("#"..self.sprite, "enable")
	end
	idle(self)
end

function idle(self)
	local currentX = go.get_position().x
	if self.orders == hash("patrol") then
		if currentX > 320 then
			walk(self, 40)
		else
			walk(self, 620)
		end
	elseif self.orders == hash("explore") then
		if currentX == exitDown[self.level] then
			self.level = self.level + 1
			local pos = go.get_position()
			pos.y = pos.y - 100
			go.set_position(pos)
			walk(self, exitDown[self.level])
		else
			walk(self, exitDown[self.level])
		end
	elseif self.orders == hash("guard") then
		if currentX == inn then
			if math.random() > 0.5 then
				walk(self, inn + 50)
			else
				walk(self, inn - 50)
			end
		else
			walk(self, inn)
		end
	elseif self.orders == hash("flee") then
		if currentX == exitUp[self.level] and self.level > 0 then
			print(self.level)
			self.level = self.level - 1
			local pos = go.get_position()
			pos.y = pos.y + 100
			go.set_position(pos)
			if self.level == 0 then
				self.orders = hash("rest")
				walk(self, inn)
			else
				walk(self, exitUp[self.level])
			end
		elseif currentX == exitUp[self.level] and self.level == 0 then
			go.delete()
		else
			walk(self, exitUp[self.level])
		end
	elseif self.orders == hash("rest") then
		if currentX == inn then
			for key, val in pairs(self.kills) do
				self.gold = self.gold + STATS[unhash[key]].bounty * val
				self.kills[key] = 0
			end
			while self.gold > upgrades[self.charLvl + 1].XP do
				levelUp(self)
			end
			self.health = self.maxHealth
			self.orders = hash("explore")
			idle(self)
		else
			walk(self, inn)
		end
	elseif self.orders == hash("build") then
		if currentX == inn then
			build.start(self)
		else
			walk(self, inn)
		end
	end
end

local function attack(self)
	if self.alive and #self.target > 0 then
		sprite.play_flipbook("#"..self.sprite, "attack")
		msg.post(self.target[1], hash("take_damage"), {damage = self.attack})
		timer.delay(self.attack_speed, false, attack)
	elseif self.alive and #self.target == 0 then
		idle(self)
	end
end

local function fight(self)
	go.cancel_animations(go.get_id(), "position")
	if go.get_position(self.target[1]).x > go.get_position().x then
		sprite.set_hflip("#"..self.sprite, false)
	else
		sprite.set_hflip("#"..self.sprite, true)
	end
	self.action = hash("fight")
	attack(self)
end

local function die(self)
	self.alive = false
	go.set_position(go.get_position() - vmath.vector3(0, 0, 0.01))
	go.cancel_animations(go.get_id(), "position")
	sprite.play_flipbook("#"..self.sprite, "dead")
	msg.post("#collisionobject", "disable")
	if self.type == hash("hero") then
		msg.post("/world", "coinDrop", {gold = self.gold, level = self.level})
	else
		msg.post("/world", "removeDweller")
	end
	if self.base then
		msg.post(self.base, "die")
		if self.spawnTimer then
			timer.cancel(self.spawnTimer)
		end
	end
	timer.delay(FADE_DELAY, false, function(self) go.animate("#"..self.sprite, "tint.w", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, FADE_TIME, 0, function(self) go.delete(go.get_id()) end) end)
end

local function getLevel(y)
	local level
	if y > 850 then level = 0
	elseif y > 750 then level = 1
	elseif y > 650 then level = 2
	elseif y > 550 then level = 3
	elseif y > 450 then level = 4
	elseif y > 350 then level = 5
	elseif y > 250 then level = 6
	elseif y > 150 then level = 7
	end
	return level
end

function init(self)
	self.level = getLevel(go.get_position(go.get_id()).y)
	self.kills = {}
	self.target = {}
	if self.type == hash("hero") then
		self.bravery = (math.random() + math.random()) / 4
		self.gold = math.random(1, 5)
		for lvl = 2, 10 do
			msg.post("#"..lvl, "disable")
		end
	else
		self.bravery = 0
	end
	self.maxHealth = self.health
	idle(self)
end

function on_message(self, message_id, message, sender)
	if message_id == hash("trigger_response") then
		if (message.own_group == hash("hero_range") and message.other_group == hash("dweller_body")) or (message.own_group == hash("dweller_range") and message.other_group == hash("hero_body")) then
			if message.enter then
				table.insert(self.target, message.other_id)
				if self.action ~= hash("fight") then fight(self) end
			else
				for key, val in ipairs(self.target) do
					if val == message.other_id then
						table.remove(self.target, key)
						break
					end
				end
			end
		end
	elseif message_id == hash("take_damage") then
		self.health = self.health - message.damage
		if self.health < 1 then
			die(self)
			msg.post(sender, "target_dead", {type = self.type})
		else
			if self.maxHealth * self.bravery > self.health then
				self.orders = hash("flee")
				self.target = {}
				idle(self)
			end
		end
	elseif message_id == hash("target_dead") then
		for key, val in ipairs(self.target) do
			if val == sender.path then
				table.remove(self.target, key)
				break
			end
		end
		self.kills[message.type] = self.kills[message.type] or 0
		self.kills[message.type] = self.kills[message.type] + 1
	elseif message_id == hash("orders") then
		self.orders = message.orders; idle(self)
	end
end