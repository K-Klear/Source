local STATS = require("main.Actors.actorStats")
local P = require("main.player")
local houses = {}
local dwellersList = {"spider", "goblin", "drake", "orc"}

local GOLD = require("main/world/trackGold")
local DWELLERS = require("main/trackDwellers")
local HEROES = require("main/trackHeroes")
local activeLevel = nil

local currentAction = {action = "call", target = "spider"}

local function addCottage()
	local posX = 0
	local spread = 5
	for x = 1, spread do
		posX = posX + math.random(30, 450)
	end
	posX = posX / spread
	local posY = (math.random(879, 889))
	local posZ = -(((posY - 869) / 100) - 0.1)
	table.insert(houses, factory.create("#spawn_house", vmath.vector3(posX, posY, posZ)))
end

local hero = {}

function hero.spawn(level)
	table.insert(HEROES, {go = factory.create("#spawn_hero", vmath.vector3(-10, 880, 0.65), nil, STATS.hero), level = 1})
end

function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post("@render:", "use_fixed_fit_projection")
	for x = 1, 20 do
		addCottage()
	end
	-- create caves
	for y = 0, 6 do
		factory.create("#caveSpawner", vmath.vector3(50, 800 - y * 100, 0.6), nil, {type = 1})
		factory.create("#caveSpawner", vmath.vector3(590, 800 - y * 100, 0.6), nil, {type = 3})
		for x = 0, 3 do
			factory.create("#caveSpawner", vmath.vector3(155 + x * 110, 800 - y * 100, 0.6), nil)
		end
	end
	timer.delay(1, true, P.time)
end

local function getLevel(y)
	local level
	if y < 850 and y > 750 then level = 1
	elseif y > 650 then level = 2
	elseif y > 550 then level = 3
	elseif y > 450 then level = 4
	elseif y > 350 then level = 5
	elseif y > 250 then level = 6
	elseif y > 150 then level = 7
	end
	return level
end

local channel = {}
channel.essence = 0
channel.target = 0
local dweller = {}

function dweller.count(level, type)
	local count = 0
	for key, val in ipairs(DWELLERS[level]) do
		if val.type == type then
			count = count + 1
		end
	end
	return count
end

function dweller.most(level)
	local bestCount = 0
	local best
	for key, val in ipairs(dwellersList) do
		local count = dweller.count(level, val)
		if count > bestCount then
			best = val; bestCount = count
		end
	end
	return best
end

function dweller.empowerable(level)
	local bestCount = 0
	local best
	for key, val in ipairs(dwellersList) do
		if dweller.count(level, val.."_boss") > 0 then return end
		local count = dweller.count(level, val)
		if count > bestCount then
			best = val; bestCount = count
		end
	end
	return best
end

function dweller.closest(type, level)
	local closest
	local distance = 1/0
	for key, val in ipairs(DWELLERS[level]) do
		if val.type == type and math.abs(go.get_position(val.go).x - go.get_position("cursorEffects").x) < distance then
			closest = key; distance = math.abs(go.get_position(val.go).x - go.get_position("cursorEffects").x)
		end
	end
	return closest
end

function channel.done()
	if currentAction.action == "call" then
		table.insert(DWELLERS[activeLevel], {go = factory.create("#spawn_"..currentAction.target, vmath.vector3(20, 880 - activeLevel * 100, 0.65), nil, STATS[currentAction.target]), type = currentAction.target})
	elseif currentAction.action == "empower" then
		local target = dweller.empowerable(activeLevel)
		if target then
			local newBoss = dweller.closest(target, activeLevel)
			local newGO = {go = factory.create("#spawn_"..target.."_boss", go.get_position(DWELLERS[activeLevel][newBoss].go), nil, STATS[target.."_boss"]), type = target.."_boss"}
			go.delete(DWELLERS[activeLevel][newBoss].go, true)
			DWELLERS[activeLevel][newBoss] = newGO
			particlefx.stop("cursorEffects#"..currentAction.action)
			if activeLevel then
				particlefx.stop("fx#"..currentAction.action.."AreaCave"..activeLevel)
				if channel.timer then channel.cancel() end
				activeLevel = nil
			end
		end
	end
end

function channel.tick()
	local amount = P.essence / 10
	channel.essence = channel.essence + amount
	P.essence = P.essence - amount
	if channel.essence >= channel.target then
		P.essence = P.essence + channel.essence - channel.target
		channel.essence = 0
		channel.done()
	end
	P.updateEssence()
end

function channel.cancel(success)
	timer.cancel(channel.timer)
	P.essence = P.essence + channel.essence 
	channel.essence = 0
	P.updateEssence()
end

function on_input(self, action_id, action)
	if action_id == hash("touch") and currentAction.action then
		local level = getLevel(action.y)
		if action.pressed then
			activeLevel = level
			particlefx.play("cursorEffects#"..currentAction.action)
			if level then
				if currentAction.action == "call" then
					particlefx.play("fx#"..currentAction.action.."AreaCave"..level)
					channel.target = STATS[currentAction.target].callCost
					channel.timer = timer.delay(0.1, true, channel.tick)
				elseif currentAction.action == "empower" then
					local target = dweller.empowerable(level)
					if target then
						particlefx.play("fx#"..currentAction.action.."AreaCave"..level)
						channel.target = STATS[target].empowerCost
						channel.timer = timer.delay(0.1, true, channel.tick)
					end
				end
			end
		elseif action.released then
			particlefx.stop("cursorEffects#"..currentAction.action)
			if activeLevel then
				particlefx.stop("fx#"..currentAction.action.."AreaCave"..activeLevel)
				if channel.timer then channel.cancel() end
				activeLevel = nil
			end
		else
			if activeLevel ~= level then
				if activeLevel then
					particlefx.stop("fx#"..currentAction.action.."AreaCave"..activeLevel)
					if channel.timer then channel.cancel() end
				end
				activeLevel = level
				if level then
					if currentAction.action == "call" then
						particlefx.play("fx#"..currentAction.action.."AreaCave"..level)
						channel.target = STATS[currentAction.target].callCost
						channel.timer = timer.delay(0.1, true, channel.tick)			
					elseif currentAction.action == "empower" then
						local target = dweller.empowerable(level)
						if target then
							particlefx.play("fx#"..currentAction.action.."AreaCave"..level)
							channel.target = STATS[target].empowerCost
							channel.timer = timer.delay(0.1, true, channel.tick)
						end
					end
				end
			end
		end
		go.set_position(vmath.vector3(action.x, action.y, 1), "cursorEffects")
	elseif action_id == hash("summon") and action.pressed then
		hero.spawn(1)
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("setAction") then
		particlefx.stop("cursorEffects#"..currentAction.action)
		currentAction = {action = message.action, target = message.target}
	end
end